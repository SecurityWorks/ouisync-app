#!/usr/bin/env zsh
ROOT=$(realpath "$(realpath "$(dirname "$0")")/..")

# First, prepare swift package (if not already done)
#$ROOT/ouisync/bindings/swift/Ouisync/init.sh || exit 1

# The rust binary assets take up considerable space (the symbols used in a full
# debug + release build of the library for all platforms weighs in around 10GB)
# and might be expected in (at least) four separate locations by default:
# * ~/Library/Developer/Xcode/DerivedData/Runner-{randomhash} for macos builds
#   started from xcode
# * ~/Library/Developer/Xcode/DerivedData/Runner-{randomhash} for ios builds
#   started from xcode
# * ./build/ for command line builds triggered by "flutter build macos" (ios
#   uses a different flutter backend that uses the xcode build path)
# * ./ouisync/bindings/swift/Ouisync/.build/ for command line builds triggered
#   by `swift build` (e.g. when working on the bindings)
# * any additional location(s) if building the rust library manually which are
#   assumed out of scope here: ouisync for mac uses its own rust toolchain
#
# Worse still, to support on-demand compilation, we have to use a build plugin
# that is sandboxed to ONLY permit writes to those locations, thus we have to
# get creative with symlinks to avoid storing 40GB of duped intermediary files:
#
# Because the ./ouisync/bindings/swift/Ouisync/.build/ path is required (since
# it must work independently of this repository), we treat it as the normative
# source and symlink others there. Thanks to Isaac Halvorso's awesome hack from
# https://hisaac.net/blog/set-an-xcode-projects-deriveddata-location-via-script/
# we don't have to reverse-engineer the hashing mechanism used by Apple and can
# instead tell Xcode to use a symlinked location relative to the workspace.
for PLATFORM in macos ios; do
    CONFIG="$ROOT/$PLATFORM/Runner.xcworkspace/xcuserdata/$(whoami).xcuserdatad"
    mkdir -p "$CONFIG"
    PLIST="${CONFIG}/WorkspaceSettings.xcsettings"
    test -f "$PLIST" || plutil -create xml1 "$PLIST"
    plutil -replace BuildLocationStyle -string UseAppPreferences "$PLIST"
    plutil -replace CustomBuildLocationType -string RelativeToDerivedData "$PLIST"
    plutil -replace DerivedDataCustomLocation -string ../build/$PLATFORM "$PLIST"
    plutil -replace DerivedDataLocationStyle -string WorkspaceRelativePath "$PLIST"
    plutil -lint "$PLIST"
done

declare -A MAP
MAP+=("Update rust dependencies/outputs" "Update rust dependencies.output")
MAP+=("outputs/ouisync/Ouisync/destination/CargoBuild" "ouisync.output/Ouisync/CargoBuild")
for SRC NAME in ${(kv)MAP}; do
    for DST in "$ROOT/build/macos/Runner/SourcePackages/plugins" \
               "$ROOT/build/ios/Runner/SourcePackages/plugins" \
               "$ROOT/build/macos/SourcePackages/plugins"; do
        mkdir -p "$DST/$NAME"
        rm -Rf "$DST/$NAME"
        ln -s "$ROOT/ouisync/bindings/swift/Ouisync/.build/plugins/$SRC" "$DST/$NAME"
    done
done
